#include "FocalSearcher.h"
#include <cstdio>
#include <cstdlib>
#include <unistd.h>
#include <cmath>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <algorithm>


int main( int argc, char *argv[] ) {
   if( argc != 4 ) {
      std::cerr<<"Usage: "<<argv[0]<<" [file_list (per azi_misG_varG_misP_varP_A_varA_filename dazi)] [eigenvalues_near_source (.R file from SURF_DIS)] [phv file (.R.phv)]"<<std::endl;
      exit(-1);
   }

   /* read in per list */
   std::vector<PerDazi> per_dazi_list;
   std::vector<std::string> filelist;
   std::ifstream fin(argv[1]);
   if( ! fin ) {
      std::cerr<<"Cannot read from file "<<argv[1]<<std::endl;
      exit(0);
   }
   for(std::string line; std::getline(fin, line); ) {
      PerDazi pdtmp;
      std::string name;
      std::stringstream sin(line);
      if( ! (sin >> pdtmp.per >> name >> pdtmp.dazi) ) continue;
      if( access( name.c_str(), R_OK ) == -1 ) {
	 std::cerr<<"Warning(main): Cannot read from file "<<name<<std::endl;
	 continue;
      }
      per_dazi_list.push_back(pdtmp);
      filelist.push_back(name);
   }
   fin.close();
   std::cout<<per_dazi_list.size()<<" periods/files read in."<<std::endl;


   /* read in azimuthally averaged groupT, groupVar, phaseT, phaseVar, and amp, ampVar data at each period */
   std::vector< std::vector<AziData> > per_azidata_lst;
   for(int iper=0; iper<filelist.size(); iper++) {
      float dazi = per_dazi_list.at(iper).dazi;
      int nazi = (int)ceil(360/dazi) + 1;
      std::vector<AziData> azidata_lst;
      azidata_lst.resize(nazi);
      fin.clear(); fin.open(filelist.at(iper));
      if( ! fin ) continue;
      for(std::string line; std::getline(fin, line); ) {
	 AziData adtmp;
	 if( sscanf( line.c_str(), "%f %f %f %f %f %f %f", &adtmp.azi, &adtmp.misG, 
             &adtmp.varG, &adtmp.misP, &adtmp.varP, &adtmp.A, &adtmp.varA ) != 7 ) continue;
	 int iazi = (int)floor(adtmp.azi/dazi+0.5);
	 if( adtmp.azi/dazi != iazi ) {
	    std::cerr<<"Warning(main) input azimuth ("<<adtmp.azi<<") doesn't fit into any azi grid!"<<std::endl;
	    continue;
	 }
	 azidata_lst.at(iazi) = adtmp;
      }
      fin.close();
      //std::cerr<<azidata_lst.size()<<std::endl;
      per_azidata_lst.push_back(azidata_lst);
   }
   //std::cerr<<per_azidata_lst.size()<<std::endl;


   // search focal
   //std::string radexe("/projects/yeti4009/code/Programs/RadPattern/rad_pattern4_Rayl.dir/rad_pattern4_Rayl");
   FocalSearcher fs( FocalInfo(208, 36, -89, 8), per_dazi_list, per_azidata_lst, argv[2], argv[3] );
/*
   //FocalInfo finfo(205, 51, -93, 10);
   //FocalInfo finfo(200, 38, -93, 9);
   FocalInfo finfo(217, 34, -88, 11);
   float E;
   fs.Energy(finfo, E);
   std::cerr<<finfo<<" "<<E<<std::endl;
*/
   if( ! fs.SearchFocal( 200, 0.95, 0.1 ) ) std::cerr<<"Search failed!"<<std::endl;
   FocalInfo fresult = fs.FInfo();
   std::cout<<fresult<<std::endl;

   return 0;
}
