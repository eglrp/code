#ifndef FOCALSEARCHER_H
#define FOCALSEARCHER_H
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <memory>

struct PerDazi {
   float per, dazi;
   PerDazi( float perin = -12345., float daziin = -12345. ) : per(perin), dazi(daziin) {}
};

struct AziData {
   float azi;
   float misG, varG;
   float misP, varP;
   float A, varA;
   AziData( float aziin = -12345., float misGin = -12345., 
	    float misPin = -12345., float ampin = -12345. ) 
      : azi(aziin), misG(misGin), misP(misPin), A(ampin) {}

   friend std::ostream& operator<< ( std::ostream& o, const AziData& ad ) {
      o<<"( "<<ad.azi<<"  "<<ad.misG<<" "<<ad.varG<<"  "<<ad.misP<<" "<<ad.varP
       <<"  "<<ad.A<<" "<<ad.varA<<" )"; 
      return o; 
   }

};

struct FocalInfo {
   int strike, dip, rake;
   int depth;
   FocalInfo( int strikein = 180, int dipin = 45, int rakein = 0, int depthin = 10 )
      : strike(strikein), dip(dipin), rake(rakein), depth(depthin) {}
   void Set( int strikein = 180, int dipin = 45, int rakein = 0, int depthin = 10 ) {
      strike = strikein; dip = dipin; rake = rakein; depth = depthin;
   }
   friend std::ostream& operator<< ( std::ostream& o, const FocalInfo& f ) {
      o<<"( "<<std::setw(3)<<f.strike<<" "<<std::setw(2)<<f.dip<<" "<<std::setw(4)<<f.rake<<"  "<<std::setw(2)<<f.depth<<" )"; 
      return o; 
   }
};


class FocalSearcher {
protected:
   struct FSimpl;
   std::unique_ptr<FSimpl> pimplFS;

public:
   /* con/destructors */
   FocalSearcher();
   FocalSearcher( const FocalInfo &finfoin, const std::vector<PerDazi> &perlistin, 
		  const std::vector< std::vector<AziData> > &per_azi_data_in,
		  const char *feignamein, const char *fphvnamein );

   ~FocalSearcher();

   /* pimplFS-member getters/setters */
   const FocalInfo& FInfo() const;
	 FocalInfo& FInfo();
   const std::string& FEigName() const;
	 std::string& FEigName();
   const std::string& FPhvName() const;
	 std::string& FPhvName();

   /* Predict and compute misfit */
   bool RadPatternR( const std::string& feigname, const std::string& fphvname, const FocalInfo& finfo,
		     std::vector<float>& perlst, std::vector< std::vector<AziData> >& per_azi_pred );

   bool Energy( const FocalInfo& finfo, float &E );

   /* the searcher */
   bool SearchFocal( int, float, float );
      
};


#endif
