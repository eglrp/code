#ifndef FOCALSEARCHER_H
#define FOCALSEARCHER_H
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <memory>

struct PerDazi {
   float per, dazi;
   PerDazi( float perin = -12345., float daziin = -12345. ) : per(perin), dazi(daziin) {}
};

struct AziData {
   float azi;
   float misG, varG;
   float misP, varP;
   float A, varA;
   AziData( float aziin = -12345., float misGin = -12345., float misPin = -12345., float ampin = -12345. ) 
      : azi(aziin), misG(misGin), misP(misPin), A(ampin) {}
};

struct FocalInfo {
   int strike, dip, rake;
   int depth;
   FocalInfo( int strikein = 180, int dipin = 45, int rakein = 0, int depthin = 10 )
      : strike(strikein), dip(dipin), rake(rakein), depth(depthin) {}
   void Set( int strikein = 180, int dipin = 45, int rakein = 0, int depthin = 10 ) {
      strike = strikein; dip = dipin; rake = rakein; depth = depthin;
   }
   friend std::ostream& operator<< ( std::ostream& o, const FocalInfo& f ) {
      o<<"( "<<std::setw(3)<<f.strike<<" "<<std::setw(2)<<f.dip<<" "<<std::setw(4)<<f.rake<<"  "<<std::setw(2)<<f.depth<<" )"; 
      return o; 
   }
};


class FocalSearcher {
   FocalInfo finfo;
   std::vector<PerDazi> perlist;
   std::vector< std::vector<AziData> > per_azi_data;
   std::string feigname, fphvname;
   std::string radexe;
   struct FSimpl;
   std::unique_ptr<FSimpl> pimpl;

public:
   FocalSearcher( std::vector<PerDazi> &perlistin, std::vector< std::vector<AziData> > &per_azi_data_in,
		  const char *feignamein, const char *fphvnamein, const char *radexein );

   ~FocalSearcher();

   const FocalInfo& FINFO() const { return finfo; }
	 FocalInfo& FINFO() { return finfo; }

   bool Energy( FocalInfo finfo, float &E );
/*
   float FInfo() {
      if( depth == -12345. ) SearchDepth();
      return depth; 
   }
*/

   bool SearchFocal();
      
};


#endif
