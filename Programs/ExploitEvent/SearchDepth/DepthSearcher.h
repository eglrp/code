#ifndef DEPTHSEARCHER_H
#define DEPTHSEARCHER_H
#include "SysTools.h"
#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <chrono>
#include <random>
#include <functional>

class DepthSearcher {
   float depth;
   std::vector< std::vector<float> > amplist;
   std::string feigname;
   std::string radexe;

public:
   DepthSearcher( std::vector< std::vector<float> > &amplistin, const char *feignamein, const char *radexein ) 
      : amplist(amplistin), feigname(feignamein), radexe(radexein) { depth = -12345.; }


   float Depth() { 
      if( depth == -12345. ) SearchDepth();
      return depth; 
   }

   bool SearchDepth() {
      // generate and make working directory
      unsigned timeseed = std::chrono::system_clock::now().time_since_epoch().count();
      std::default_random_engine generator (timeseed);
      std::uniform_real_distribution<float> distribution(0., 1.);
      auto rand = std::bind ( distribution, generator );
      std::string tdir = "Working_" + std::to_string(rand());
      while( ! MKDir(tdir.c_str()) ) tdir = "Working_" + std::to_string(rand());

      dRemove( tdir.c_str() );
   }

};


#endif
