#ifndef FOCALSEARCHER_H
#define FOCALSEARCHER_H
#include "RadPattern.h"
#include "StackTrace.h"
#include "Exceptions.h"
#include "FileName.h"
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <vector>
#include <memory>
#include <random>
#include <chrono>

/* allowed min azimuth coverage (as percentage of 360 degree) */
#define MIN_AZI_PERC 0.3
/* number of iterations in excluding bad (out of 2sigma) data */
#define NEX 1
/* weighting between Rayleigh and Love data for Focal searching */
#define weightR_Foc 0.5
#define weightL_Foc 0.5


/* -------------------- data structures -------------------- */
struct PerDazi {
   float per, dazi;
   PerDazi( float perin = -12345., float daziin = -12345. )
      : per(perin), dazi(daziin) {}
};



/* -------------------- the RNG class-------------------- */
class Rand {
   std::default_random_engine generator1;
   std::uniform_real_distribution<float> d_uniform;
   std::normal_distribution<float> d_normal;
public:
   Rand()
      : generator1( std::chrono::system_clock::now().time_since_epoch().count() )
      , d_uniform(0., 1.)
      , d_normal(0., 1.) {}

   //~Rand() {} // should not be defined!!!

   inline float Uniform() { return d_uniform(generator1); }
   inline float Normal() { return d_normal(generator1); }

};



/* -------------------- the focal searcher class -------------------- */
class FocalSearcher {
public:
   /* con/destructors and operators */
   FocalSearcher();
   FocalSearcher( const FocalSearcher& );
   FocalSearcher( FocalSearcher&& );
   FocalSearcher& operator= ( const FocalSearcher& );
   FocalSearcher& operator= ( FocalSearcher&& );
   FocalSearcher( const FocalInfo<ftype> &finfoin,
		  const std::vector<PerDazi> &perRlistin, 
		  const std::vector<PerDazi> &perLlistin, 
		  const std::vector< std::vector<AziData> > &per_R_azi_data_in,
		  const std::vector< std::vector<AziData> > &per_L_azi_data_in,
		  const char *fReignamein, const char *fRphvnamein,
		  const char *fLeignamein, const char *fLphvnamein );
   ~FocalSearcher();


   /* getters/setters for the current Focal Info */
   const FocalInfo<ftype>& FInfo() const;
	 FocalInfo<ftype>& FInfo();
   const FocalInfo<ftype>& FInfoOld() const;
	 FocalInfo<ftype>& FInfoOld();

   /* Predict Rayleigh wave radiation patterns */
//   bool RadPatternR( const std::string& feigname, const std::string& fphvname, const FocalInfo& finfo,
//		     std::vector<float>& perlst, std::vector< std::vector<AziData> >& per_azi_pred );


   void EnergyF( const FocalInfo<ftype>& finfo, float &E, double& AfactorR, double& AfactorL );
   void chiSquareF( std::vector< std::vector<AziData> >& Rdata, std::vector<PerDazi>& perRlist,
                    std::vector< std::vector<AziData> >& Ldata, std::vector<PerDazi>& perLlist,
                    const FocalInfo<ftype>& finfo, float& chiS, float& wSum, int& N, 
                    double& AfactorR, double& AfactorL );

   /* the searcher */
   virtual void SearchFocal( int, float, float );


protected:
   /* pimplFS-member getters/setters */
   const bool& RFlag() const;
	 bool& RFlag();
   const bool& LFlag() const;
	 bool& LFlag();

   const double& AFactorR() const;
	 double& AFactorR();
   const double& AFactorL() const;
	 double& AFactorL();


   /* reset/fill in the FocalSearcher 
    * by getting file names and moving in data matrices from outside */
   void FSreset( const FileName& outname_misFin,
	       const FileName& fReignamein, const FileName& fRphvnamein,
	       const FileName& fLeignamein, const FileName& fLphvnamein );
   void FSreset( const FileName& outname_misFin,
	       const FileName& fReignamein, const FileName& fRphvnamein,
	       const FileName& fLeignamein, const FileName& fLphvnamein,
	       std::vector<PerDazi> &&perRlistin,
	       std::vector<PerDazi> &&perLlistin,
	       std::vector< std::vector<AziData> > &&per_R_azi_data_in,
	       std::vector< std::vector<AziData> > &&per_L_azi_data_in );


private:
   struct FSimpl;
   std::unique_ptr<FSimpl> pimplFS;
};


#endif
