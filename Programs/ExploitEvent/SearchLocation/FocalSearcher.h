#ifndef FOCALSEARCHER_H
#define FOCALSEARCHER_H
#include "RadPattern.h"
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <memory>

/* allowed min number of measurements */
#define MIN_AZI_SIZE 10

struct PerDazi {
   float per, dazi;
   PerDazi( float perin = -12345., float daziin = -12345. )
      : per(perin), dazi(daziin) {}
};

/*
struct AziData {
   float azi;
   float misG, varG;
   float misP, varP;
   float A, varA;
   AziData( float aziin = -12345., float misGin = -12345., 
	    float misPin = -12345., float ampin = -12345. ) 
      : azi(aziin), misG(misGin), misP(misPin), A(ampin) {}

   friend std::ostream& operator<< ( std::ostream& o, const AziData& ad ) {
      o<<"( "<<ad.azi<<"  "<<ad.misG<<" "<<ad.varG<<"  "<<ad.misP<<" "<<ad.varP
       <<"  "<<ad.A<<" "<<ad.varA<<" )"; 
      return o; 
   }

};

struct FocalInfo {
   int strike, dip, rake;
   int depth;
   FocalInfo( int strikein = 180, int dipin = 45, int rakein = 0, int depthin = 10 )
      : strike(strikein), dip(dipin), rake(rakein), depth(depthin) {}
   friend std::ostream& operator<< ( std::ostream& o, const FocalInfo& f ) {
      o<<"( "<<std::setw(3)<<f.strike<<" "<<std::setw(2)<<f.dip<<" "<<std::setw(4)<<f.rake<<"  "<<std::setw(2)<<f.depth<<" )"; 
      return o; 
   }
};
*/


class FocalSearcher {
protected:
   struct FSimpl;
   std::unique_ptr<FSimpl> pimplFS;

public:
   /* con/destructors */
   FocalSearcher();
   FocalSearcher( const FocalInfo<float> &finfoin,
		  const std::vector<PerDazi> &perRlistin, 
		  const std::vector<PerDazi> &perLlistin, 
		  const std::vector< std::vector<AziData> > &per_R_azi_data_in,
		  const std::vector< std::vector<AziData> > &per_L_azi_data_in,
		  const char *fReignamein, const char *fRphvnamein,
		  const char *fLeignamein, const char *fLphvnamein );

   ~FocalSearcher();

   /* pimplFS-member getters/setters */
   const std::string& FMisF() const;
	 std::string& FMisF();
   const FocalInfo<float>& FInfo() const;
	 FocalInfo<float>& FInfo();
   const FocalInfo<float>& FInfoOld() const;
	 FocalInfo<float>& FInfoOld();

   const bool& RFlag() const;
	 bool& RFlag();
   const bool& LFlag() const;
	 bool& LFlag();


   const double& AFactorR() const;
	 double& AFactorR();
   const double& AFactorL() const;
	 double& AFactorL();

   const std::string& FREigName() const;
	 std::string& FREigName();
   const std::string& FRPhvName() const;
	 std::string& FRPhvName();

   const std::string& FLEigName() const;
	 std::string& FLEigName();
   const std::string& FLPhvName() const;
	 std::string& FLPhvName();

   const std::vector<PerDazi>& PerRList() const;
	 std::vector<PerDazi>& PerRList();
   const std::vector< std::vector<AziData> >& Per_R_Azi_Data() const;
	 std::vector< std::vector<AziData> >& Per_R_Azi_Data();

   const std::vector<PerDazi>& PerLList() const;
	 std::vector<PerDazi>& PerLList();
   const std::vector< std::vector<AziData> >& Per_L_Azi_Data() const;
	 std::vector< std::vector<AziData> >& Per_L_Azi_Data();


   /* Predict Rayleigh wave radiation patterns */
//   bool RadPatternR( const std::string& feigname, const std::string& fphvname, const FocalInfo& finfo,
//		     std::vector<float>& perlst, std::vector< std::vector<AziData> >& per_azi_pred );


   bool EnergyF( const FocalInfo<float>& finfo, float &E, double& AfactorR, double& AfactorL );

   /* the searcher */
   bool SearchFocal( int, float, float );
      
};


#endif
