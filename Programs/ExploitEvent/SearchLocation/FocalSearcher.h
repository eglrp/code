#ifndef FOCALSEARCHER_H
#define FOCALSEARCHER_H
#include "RadPattern.h"
#include "StackTrace.h"
#include "Exceptions.h"
#include "FileName.h"
#include <iostream>
#include <iomanip>
#include <vector>
#include <memory>
#include <random>
#include <chrono>


/* -------------------- the RNG class-------------------- */
class Rand {
   std::default_random_engine generator1;
   std::uniform_real_distribution<float> d_uniform;
   std::normal_distribution<float> d_normal;
public:
   Rand() /* add a true random number from std::random_device to the time seed to ensure thread safety */
      : generator1( std::chrono::system_clock::now().time_since_epoch().count() + std::random_device{}() )
      , d_uniform(0., 1.)
      , d_normal(0., 1.) {}

   //~Rand() {} // should not be defined!!!

   inline float Uniform() { return d_uniform(generator1); }
   inline float Normal() { return d_normal(generator1); }

};



/* -------------------- data structures -------------------- */
enum Dtype { Undefined=0, B, R, L }; // type of data to be used

struct PerDazi {
   float per, dazi;
   PerDazi( float perin = -12345., float daziin = -12345. )
      : per(perin), dazi(daziin) {}
};

template< class T >
struct FocalInfo {
   T strike, dip, rake, depth;

   //FocalInfo( T strikein = 180, T dipin = 45, T rakein = 0, T depthin = 10 )
   FocalInfo( T strikein = -12345, T dipin = -12345, T rakein = -12345, T depthin = -12345 )
      : strike(strikein), dip(dipin), rake(rakein), depth(depthin) {}

   friend std::ostream& operator<< ( std::ostream& o, const FocalInfo& f ) {
      o.precision(6);
      o<<std::setw(6)<<f.strike<<" "<<std::setw(6)<<f.dip<<" "<<std::setw(6)<<f.rake<<"  "<<std::setw(6)<<f.depth; 
      return o; 
   }

   friend bool operator== ( const FocalInfo<T>& fi1, const FocalInfo<T>& fi2 ) {
      T dis_st = fabs(fi1.strike - fi2.strike);
      T dis_di = fabs(fi1.dip - fi2.dip);
      T dis_ra = fabs(fi1.rake - fi2.rake);
      T dis_de = fabs(fi1.depth - fi2.depth);
      return (dis_st<0.1 && dis_di<0.1 && dis_ra<0.1 && dis_de<0.1);
   }

};

typedef float ftype;




/* -------------------- the focal searcher class -------------------- */
class FocalSearcher {
public:
   /* con/destructors and operators */
   FocalSearcher();
   FocalSearcher( const FocalSearcher& );
   FocalSearcher( FocalSearcher&& );
   FocalSearcher& operator= ( const FocalSearcher& );
   FocalSearcher& operator= ( FocalSearcher&& );
   FocalSearcher( const std::vector<PerDazi> &perRlistin, 
		  const std::vector<PerDazi> &perLlistin, 
		  const std::vector< std::vector<AziData> > &per_R_azi_data_in,
		  const std::vector< std::vector<AziData> > &per_L_azi_data_in,
		  const char *fReignamein, const char *fRphvnamein,
		  const char *fLeignamein, const char *fLphvnamein );
   ~FocalSearcher();


   /* compute (different types of) misfits */
   void EnergyF( const FocalInfo<ftype>& finfo, const Dtype datatype, float &E, double& AfactorR, double& AfactorL );
   void chiSquareF( std::vector< std::vector<AziData> >& Rdata, std::vector<PerDazi>& perRlist,
                    std::vector< std::vector<AziData> >& Ldata, std::vector<PerDazi>& perLlist,
                    const FocalInfo<ftype>& finfo, const Dtype datatype,
		    float& chiS, float& wSum, int& N, double& AfactorR, double& AfactorL );

   /* the searcher */
   virtual FocalInfo<ftype> SearchFocal( const FocalInfo<ftype>&, const Dtype datatype, int, float, float );


protected:
   /* define class scope constants */
   static constexpr int NEX = 1;		// number of iterations in excluding bad (out of 2sigma) data
   static constexpr float MIN_AZI_PERC = 0.3;	// allowed min azimuth coverage (as percentage of 360 degree)


   /* pimplFS-member getters */
   //const double& AFactorR() const;
   //const double& AFactorL() const;

	
	/* rescale the amplitudes of datapred based on data */
	void ReScalePred( std::vector< std::vector<AziData> >& data, std::vector< std::vector<AziData> >& datapred, double& Ampfactor );


   /* reset/fill in the FocalSearcher 
    * by getting file names and moving in data matrices from outside */
   void FSreset( const FileName& outname_misFin,
	       const FileName& fReignamein, const FileName& fRphvnamein,
	       const FileName& fLeignamein, const FileName& fLphvnamein,
	       const float weightR_Foc_in, const float weightL_Foc_in );
   void FSreset( const FileName& outname_misFin,
	       const FileName& fReignamein, const FileName& fRphvnamein,
	       const FileName& fLeignamein, const FileName& fLphvnamein,
	       const float weightR_Foc_in, const float weightL_Foc_in,
	       std::vector<PerDazi> &&perRlistin,
	       std::vector<PerDazi> &&perLlistin,
	       std::vector< std::vector<AziData> > &&per_R_azi_data_in,
	       std::vector< std::vector<AziData> > &&per_L_azi_data_in );


private:
   struct FSimpl;
   std::unique_ptr<FSimpl> pimplFS;
};


#endif
