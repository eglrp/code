#include "EQKSearcher.h"
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

struct FocalInfo{
   float strike, dip, rake, depth;
};
struct EQKSearcher::EQimpl {
   std::string fparam;
   std::vector<std::string> fRlist, fLlist;
   std::vector<float> perRlist, perLlist;
   float clon, clat, Rs;
   FocalInfo finfo;
};

EQKSearcher::EQKSearcher( const char* fparamin ) 
   : pimpl(new EQimpl) {
   pimpl->fparam = fparamin;
   pimpl->clon = -12345.; 
   pimpl->clat = -12345.; 
   pimpl->Rs = -12345.;
   if( ! LoadParams( pimpl->fparam.c_str() ) ) {
      std::cerr<<"ERROR(EQKSearcher::EQKSearcher): Failed to load parameters from file "<<pimpl->fparam<<std::endl;
      exit(0);
   }
}

EQKSearcher::~EQKSearcher() {}

bool EQKSearcher::LoadParams( const char* fname ) {
   std::ifstream fin(fname);
   if( ! fin ) return false;
   int nparam = 0;
   for( std::string stmp; std::getline(fin, stmp); ) {
      int retval = Set( stmp.c_str() );
      if( retval == -3 ) continue; // reapeated period in fRlist or fLlist
      else if( retval == -2 ) continue; // empty input
      else if( retval == -1 ) continue;// std::cerr<<"Warning(EQKSearcher::Load): Unknown parameter name: "<<stmp<<std::endl;
      else if( retval == 0 ) continue;// std::cerr<<"Warning(EQKSearcher::Load): Empty parameter field for "<<stmp<<std::endl;
      else nparam++;
   }
   fin.close();
   std::cout<<"### "<<nparam<<" succed loads from param file "<<fname<<". ###"<<std::endl;
   return true;
}

int EQKSearcher::Set( const char *input ) {
   std::istringstream buff(input);
   std::string stmp;
   if( ! (buff>>stmp) ) return -2;
   bool succeed;
   if( stmp == "clon" ) { succeed = buff >> pimpl->clon; if(pimpl->clon<0.) pimpl->clon += 360.; }
   else if( stmp == "clat" ) succeed = buff >> pimpl->clat;
   else if( stmp == "Rs") succeed = buff >> pimpl->Rs;
   else if( stmp == "strike" ) succeed = buff >> pimpl->finfo.strike;
   else if( stmp == "dip" ) succeed = buff >> pimpl->finfo.dip;
   else if( stmp == "rake" ) succeed = buff >> pimpl->finfo.rake;
   else if( stmp == "depth" ) succeed = buff >> pimpl->finfo.depth;
   else if( stmp == "fRm" ) {
      std::string stmp;
      float per;
      succeed = buff >> stmp >> per;
      for(int iper=0; iper<pimpl->perRlist.size(); iper++) if(pimpl->perRlist.at(iper) == per) return -3;
      pimpl->fRlist.push_back(stmp);
      pimpl->perRlist.push_back(per);
   }
   else if( stmp == "fLm" ) {
      std::string stmp;
      float per;
      succeed = buff >> stmp >> per;
      for(int iper=0; iper<pimpl->perLlist.size(); iper++) if(pimpl->perLlist.at(iper) == per) return -3;
      pimpl->fLlist.push_back(stmp);
      pimpl->perLlist.push_back(per);
   }
   else return -1;
   if( succeed ) return 1;
   return 0;
}

bool EQKSearcher::PreSearchCheck() { return true; }
