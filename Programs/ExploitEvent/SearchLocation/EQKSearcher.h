#ifndef EQKSEARCHER_H
#define EQKSEARCHER_H
#include "FocalSearcher.h"
#include "RadPattern.h"
#include <cstdio>
#include <memory>

/* allowed min number of measurements in each azimuth bin */
#define MIN_BAZI_SIZE 3
/* allowed min percentage of path length in the vel map */
#define Min_Perc 0.95

/* Location, travel_time, amplitude, misfit, and
 * corrections on a single station, derived from AziData */
struct StaData : public AziData {
   float lon, lat;
   float dist;
   float grT, phT, Apred;

   StaData()
      : AziData() 
      , lon(-12345.), lat(-12345.), dist(-12345.), grT(-12345.), phT(-12345.) {}

   StaData( float lonin, float latin, float distin, float grTin,
	    float phTin, float aziin, float misGin, float misPin, float ampin )
      : AziData( aziin, misGin, misPin, ampin )
      , lon(lonin), lat(latin), dist(distin), grT(grTin), phT(phTin) {}

   StaData( const char *input ) 
      : AziData() {
      sscanf(input, "%f %f %f %f %f", &lon, &lat, &grT, &phT, &A);
   }

   friend std::ostream& operator<< ( std::ostream& o, const StaData& sd ) {
      o<<"( "<<sd.lon<<", "<<sd.lat<<" ): dist = "<<sd.dist
       <<" grT = "<<sd.grT<<" phT = "<<sd.phT<<"    "<<sd.azi;
      return o;
   }
};


/* earthquake epicenter information */
struct EpicInfo {
   float lon, lat;
   float t0;
   EpicInfo( float lonin = 0., float latin = 0., float t0in = 0. )
      : lon(lonin), lat(latin), t0(t0in) {}
   friend std::ostream& operator<< ( std::ostream& o, const EpicInfo& e ) {
      o<<"( "<<e.lon<<" "<<e.lat<<"  "<<e.t0<<" )"; 
      return o; 
   }
};


/* Earthquake-source searcher, derived from the focal searcher.
 * Can either search for EpicInfo with a fixed FocalInfo
 * or search for FocalInfo with a fixed EpicInfo */
class EQKSearcher : public FocalSearcher {
   struct EQimpl;
   std::unique_ptr<EQimpl> pimplES;
public:
   /* con/destructors */
   EQKSearcher( const char* );
   ~EQKSearcher();

   /* getter/setters */
   const EpicInfo& EInfo() const;
	 EpicInfo& EInfo();

/*
   const std::string& FREigName() const;
	 std::string& FREigName();
   const std::string& FRPhvName() const;
	 std::string& FRPhvName();

   const std::string& FLEigName() const;
	 std::string& FLEigName();
   const std::string& FLPhvName() const;
	 std::string& FLPhvName();
*/

   /* prepare database */
   bool LoadParams( const char* );
   int Set( const char* );
   bool LoadData();

   /* Predict Love wave radiation patterns (RadPatternR is defined in the FocalSearcher) */
//   bool RadPatternL( const std::string& feigname, const std::string& fphvname, const FocalInfo& finfo,
//		     std::vector<float>& perlst, std::vector< std::vector<AziData> >& per_azi_pred );

   /* update azimuth, distance, and corrections for each
    * station based on the current location and focal information */
   bool UpdateAziDis();
   bool UpdateFocalCorr( bool flag = true );
   /* output misfit-v.s.-focal_corrections
    * should always be called after UpdateAziDis() and UpdateFocalCorr() */
   bool OutputFocal();

   /* compute rms-misfit square */
   bool EnergyL( EpicInfo& einfo, float& E );
   /* compute azimuthally averaged misfits */
   bool PrepareFocalData();
   /* search for the location assuming fixed focal corrections */
   bool SearchLocation( int nsearch, float alpha, float Tfactor );

};

#endif
