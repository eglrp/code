#ifndef EQKSEARCHER_H
#define EQKSEARCHER_H
#include "FocalSearcher.h"
#include <cstdio>
#include <memory>

struct StaData : public AziData {
   float lon, lat;
   float dist;
   float grT, phT;

   StaData( float lonin = -12345., float latin = -12345., float distin = -12345., 
	    float grTin = -12345., float phTin = -12345., float aziin = -12345.,
	    float misGin = -12345., float misPin = -12345., float ampin = -12345. )
      : AziData( aziin, misGin, misPin, ampin )
      , lon(lonin), lat(latin), dist(distin), grT(grTin), phT(phTin) {}

   StaData( const char *input ) {
      sscanf(input, "%f %f %f %f %f", &lon, &lat, &grT, &phT, &A);
   }

   friend std::ostream& operator<< ( std::ostream& o, const StaData& sd ) {
      o<<"( "<<sd.lon<<", "<<sd.lat<<" ): dist = "<<sd.dist
       <<" grT = "<<sd.grT<<" phT = "<<sd.phT<<"    "<<sd.azi;
      return o;
   }
};


struct EpicInfo {
   float lon, lat;
   float t0;
   EpicInfo( float lonin = 0., float latin = 0., float t0in = 0. )
      : lon(lonin), lat(latin), t0(t0in) {}
   friend std::ostream& operator<< ( std::ostream& o, const EpicInfo& e ) {
      o<<"( "<<e.lon<<" "<<e.lat<<"  "<<e.t0<<" )"; 
      return o; 
   }
};

class EQKSearcher : public FocalSearcher {
   struct EQimpl;
   std::unique_ptr<EQimpl> pimplES;
public:
   EQKSearcher( const char* );
   ~EQKSearcher();

   const std::string& FREigName() const;
	 std::string& FREigName();
   const std::string& FRPhvName() const;
	 std::string& FRPhvName();

   const std::string& FLEigName() const;
	 std::string& FLEigName();
   const std::string& FLPhvName() const;
	 std::string& FLPhvName();

   bool LoadParams( const char* );
   int Set( const char* );

   bool LoadData();

   //void UpdateAziDis();
   bool UpdateFocalCorr();

   bool Energy( EpicInfo& einfo, float& E );
   bool SearchLocation( int nsearch, float alpha, float Tfactor );

};

#endif
