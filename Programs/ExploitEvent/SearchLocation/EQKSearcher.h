#ifndef EQKSEARCHER_H
#define EQKSEARCHER_H
#include "FocalSearcher.h"
#include "ModelSpace.h"
#include "RadPattern.h"
#include "Exceptions.h"
#include "FileName.h"
#include <memory>


/* Location, travel_time, amplitude, misfit, and
 * corrections on a single station, derived from AziData */
struct StaData : public AziData {
   float lon, lat;
   float dist;
   float grT, phT, Apred;

   StaData()
      : AziData() 
      , lon(-12345.), lat(-12345.), dist(-12345.), grT(-12345.), phT(-12345.) {}

   StaData( float lonin, float latin, float distin, float grTin,
	    float phTin, float aziin, float misGin, float misPin, float ampin )
      : AziData( aziin, misGin, misPin, ampin )
      , lon(lonin), lat(latin), dist(distin), grT(grTin), phT(phTin) {}

   StaData( const char *input ) 
      : AziData() {
      sscanf(input, "%f %f %f %f %f", &lon, &lat, &grT, &phT, &A);
   }

   friend std::ostream& operator<< ( std::ostream& o, const StaData& sd ) {
      o<<"( "<<sd.lon<<", "<<sd.lat<<" ): dist = "<<sd.dist
       <<" grT = "<<sd.grT<<" phT = "<<sd.phT<<"    "<<sd.azi;
      return o;
   }
};


/* Earthquake-source searcher, derived from the focal searcher.
 * Can either search for EpicInfo with a fixed FocalInfo
 * or search for FocalInfo with a fixed EpicInfo */
/* a better structure, however, would be:
class EQKSearcher {
	FocalSearcher fSearcher;
	LocationSearcher lSearcher;
} */
class EQKSearcher : public FocalSearcher {
public:
   /* con/destructors and operators */
   EQKSearcher();
   EQKSearcher( const char* );
   EQKSearcher( const EQKSearcher& );
   EQKSearcher( EQKSearcher&& );
   EQKSearcher& operator= ( const EQKSearcher& );
   EQKSearcher& operator= ( EQKSearcher&& );
   ~EQKSearcher();

   /* getter for the current Focal & Epic Info */
   const FocalInfo<ftype>& FInfo() const;
   const EpicInfo& EInfo() const;

   /* prepare database */
   void LoadParams( const char*, const bool MoveExistF = true );
   int Set( const char*, const bool MoveExistF = true );
   void LoadData();

   /* output misfit-v.s.-focal_corrections
    * should always be called after UpdateAziDis() and UpdateFocalCorr() */
   void OutputFocal();
	/* compute and output misfits, separately, for group, phase, and amplitudes */
	void ComputeMisfitsAll();

   /* compute rms-misfit square */
   void EnergyL( const EpicInfo& einfo, float& E );
   void chiSquareL( const EpicInfo& einfo, float& chiS, float& wSum, int& N );
   /* search for the location assuming fixed focal corrections */
   void SearchLocation( int nsearch, float alpha, float Tfactor );

   /* extended version of the focal searcher
    * which prepares AziData from the StaData prior to searching */
   void SearchFocal( int nsearch, float alpha, float Tfactor );

   /* compute chi-square misfit at the current einfo and finfo */
   void EnergyMC( const ModelInfo&, float& chiS, int& Ndata ) const;
   /* search for the posterior distribution around the current einfo and finfo 
		(search in the entire focal space instead when freeFocal==true) */
   void SearchPosterior( const int nsearch1, const int nsearch2, int niter2 = NaN );

protected:
   /* define class scope constants */
   static constexpr int MIN_BAZI_SIZE = 4;		/* allowed min number of measurements in each azimuth bin */
   static constexpr float BINSTEP = 20;			/* bin averaging step size */
   static constexpr float BINHWIDTH = 10;			/* bin averaging half width */

   static constexpr float Min_Perc = 0.95;		/* allowed min fraction of path length in the vel map */
   static constexpr float Lfactor = 2.;			/* define lamda = per * Lfactor for PathAvg */

   static constexpr float DISMIN = 0.;				/* allowed min */
   static constexpr float DISMAX = 9999.;			/* and max event-station distance for location searching */

   static constexpr float varGmin = 0.1;			/* the lowerbound of GroupT, */
   static constexpr float varPmin = 0.01;			/* PhaseT, */
   static constexpr float varAmin = 2.0e-5;		/* and Amplitude (as fraction of the amplitude!) variances */

   static constexpr float Pthreshold = 0.005;	/* the threshold for probability in searching for parameter
																	sensitivity prior to the Monte Carlo search, */
   static constexpr float Sfactor = 0.1;			/* and the step half-length for the search as a fraction
																	of (ub-lb) decided by Pthreshold */

	/* protected methods that might be useful for future extensions */

   /* update azimuth, distance, and corrections for each station 
      based on the current location and focal information 
      for both Rayleigh and Love waves */
   void UpdateAziDis();
   void UpdateFocalPred();

	/* read fitting results from the result file */
	bool ReadResults( const FileName& fname, std::vector<AziData>& FitResults );
	void ComputeMisfits( const std::vector<AziData>& FitResults, AziData& results );

   /* compute azimuthally averaged misfits */
   void FillFocalSearcher();
   void PrepareAziData ( const EpicInfo& einfo, 
			 std::vector< std::vector<AziData> >& AziDataR, std::vector<PerDazi>& perRlst,
			 std::vector< std::vector<AziData> >& AziDataL, std::vector<PerDazi>& perLlst ) const;
   void MonteCarloSearch( int nsearch, ModelSpace&, std::vector< SearchInfo<ModelInfo> >&, bool outflag=false );
   float SearchBound( ModelInfo& minfo, float& key, float bound, float Pthsd, float Emin, int nsearch );

private:
	/* pointer to implementation details */
   struct EQimpl;
   std::unique_ptr<EQimpl> pimplES;
};

#endif
