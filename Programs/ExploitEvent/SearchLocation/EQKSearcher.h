#ifndef EQKSEARCHER_H
#define EQKSEARCHER_H
#include "FocalSearcher.h"
#include "RadPattern.h"
#include "Exceptions.h"
#include "FileName.h"
#include <cstdio>
#include <memory>

/* allowed min number of measurements in each azimuth bin */
#define MIN_BAZI_SIZE 4
/* bin averaging parameters */
#define BINSTEP 20
#define BINHWIDTH 10
/* allowed min percentage of path length in the vel map */
#define Min_Perc 0.95
/* define lamda = per * Lfactor for PathAvg */
#define Lfactor 2.
/* allowed min and max event-station distance for location searching */
#define DISMIN 0.
#define DISMAX 9999.
/* the weighting between Rayleigh and Love data for Location searching */
#define weightR_Loc 0.5
#define weightL_Loc 0.5
/* the lowerbound of GroupT, PhaseT and Amplitude variances */
#define varGmin 0.1 // 5.0e-3
#define varPmin 0.01 // 5.0e-4 (this is var_of_the_mean)
#define varAmin 2.0e-5 // as percentage of the amplitude! //1.0e-6


/* Location, travel_time, amplitude, misfit, and
 * corrections on a single station, derived from AziData */
struct StaData : public AziData {
   float lon, lat;
   float dist;
   float grT, phT, Apred;

   StaData()
      : AziData() 
      , lon(-12345.), lat(-12345.), dist(-12345.), grT(-12345.), phT(-12345.) {}

   StaData( float lonin, float latin, float distin, float grTin,
	    float phTin, float aziin, float misGin, float misPin, float ampin )
      : AziData( aziin, misGin, misPin, ampin )
      , lon(lonin), lat(latin), dist(distin), grT(grTin), phT(phTin) {}

   StaData( const char *input ) 
      : AziData() {
      sscanf(input, "%f %f %f %f %f", &lon, &lat, &grT, &phT, &A);
   }

   friend std::ostream& operator<< ( std::ostream& o, const StaData& sd ) {
      o<<"( "<<sd.lon<<", "<<sd.lat<<" ): dist = "<<sd.dist
       <<" grT = "<<sd.grT<<" phT = "<<sd.phT<<"    "<<sd.azi;
      return o;
   }
};


/* earthquake epicenter information */
struct EpicInfo {
   float lon, lat, t0;

   EpicInfo( float lonin = 0., float latin = 0., float t0in = 0. )
      : lon(lonin), lat(latin), t0(t0in) {}

   friend std::ostream& operator<< ( std::ostream& o, const EpicInfo& e ) {
      o.precision(6);
      o<<std::setw(6)<<e.lon<<" "<<std::setw(6)<<e.lat<<"  "<<std::setw(6)<<e.t0; 
      return o; 
   }

   friend bool operator== ( EpicInfo& ei1, EpicInfo& ei2 ) {
      float dis_lon = fabs(ei1.lon - ei2.lon) * 100.;
      float dis_lat = fabs(ei1.lat - ei2.lat) * 100.;
      float dis_t = fabs(ei1.t0 - ei2.t0);
      return (dis_lon<0.01 && dis_lat<0.01 && dis_t<0.01);
   }
};


/* Earthquake-source searcher, derived from the focal searcher.
 * Can either search for EpicInfo with a fixed FocalInfo
 * or search for FocalInfo with a fixed EpicInfo */
class EQKSearcher : public FocalSearcher {
protected:
   struct EQimpl;
   std::unique_ptr<EQimpl> pimplES;

   /* update azimuth, distance, and corrections for each station 
      based on the current location and focal information 
      for both Rayleigh and Love waves */
   void UpdateAziDis();
   void UpdateFocalPred( bool flag = true );

   /* compute azimuthally averaged misfits */
   void PrepareFocalData();
   void PrepareFocalData ( const EpicInfo& einfo, 
			   std::vector< std::vector<AziData> >& AziDataR, std::vector<PerDazi>& perRlst,
			   std::vector< std::vector<AziData> >& AziDataL, std::vector<PerDazi>& perLlst );

public:
   /* con/destructors */
   EQKSearcher( const char* );
   ~EQKSearcher();

   /* getter/setters */
   const EpicInfo& EInfo() const;
	 EpicInfo& EInfo();

   /* prepare database */
   void LoadParams( const char* );
   int Set( const char* );
   void LoadData();

   /* output misfit-v.s.-focal_corrections
    * should always be called after UpdateAziDis() and UpdateFocalCorr() */
   void OutputFocal();

   /* compute rms-misfit square */
   void EnergyL( const EpicInfo& einfo, float& E );
   void chiSquareL( const EpicInfo& einfo, float& chiS, float& wSum, int& N );
   /* search for the location assuming fixed focal corrections */
   void SearchLocation( int nsearch, float alpha, float Tfactor );

   /* extended version of the focal searcher
    * which prepares AziData from the StaData prior to searching */
   void SearchFocal( int nsearch, float alpha, float Tfactor ) {
      PrepareFocalData();
      FocalSearcher::SearchFocal( nsearch, alpha, Tfactor );
   }

   /* compute chi-square misfit at the current einfo and finfo */
   void EnergyMC( const FocalInfo<ftype>&, const EpicInfo&, float& chiS );
   /* search for the posterior distribution around the current einfo and finfo */
   void SearchPosterior( int nsearch );
};

#endif
