#ifndef  EXCEPTIONS_H
#define EXCEPTIONS_H

#include <stdexcept>

/* -------------------- warning/exceptions -------------------- */
#ifndef FuncName
//#define FuncName __PRETTY_FUNCTION__
#define FuncName __FUNCTION__
//#define FuncName __func__
#endif


namespace WarningFS {
   class Base {
   public:
      Base(const std::string message) {
	 std::cerr<<message<<std::endl;
      }
   };

   class MoveExistFile : public Base {
   public:
      MoveExistFile(const std::string funcname, const std::string info = "")
         : Base("Warning("+funcname+"): Moving existing file ("+info+").") {}
   };

   class Other : public Base {
   public:
      Other(const std::string funcname, const std::string info = "")
         : Base("Warning("+funcname+"): "+info) {}
   };

};

namespace ErrorFS {

   class Base : public std::runtime_error {
   public:
		Base(const std::string message)
			: runtime_error(message) {
				PrintStacktrace();
      }
   };

   class BadFile : public Base {
   public:
      BadFile(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Cannot access file ("+info+").") {}
   };

   class BadParam : public Base {
   public:
      BadParam(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Bad parameters ("+info+").") {}
   };

   class SizeMismatch : public Base {
   public:
      SizeMismatch(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Incompatible sizes ("+info+").") {}
   };

   class BadAzi : public Base {
   public:
      BadAzi(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Bad azi triplet ("+info+").") {}
   };

   class EmptyData : public Base {
   public:
      EmptyData(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Empty data input ("+info+").") {}
   };

   class InsufData : public Base {
   public:
      InsufData(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Insufficient data points ("+info+").") {}
   };

	class BadPred : public Base {
   public:
      BadPred(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Invalid focal prediction ("+info+").") {}
	};

	class InternalException : public Base {
   public:
      InternalException(const std::string funcname, const std::string info = "")
         : Base("Error("+funcname+"): Internal exception ("+info+").") {}
	};
};


#endif
