/* search for earthquake location and focal infomation from surface wave measurements */
/* the search space and measurement files are given in the input parameter file as follows: */
   /* clon, clat defines the search center (required) */
   /* Rs defines the search radius (required) */
   /* strike, dip, rake, depth defines the initial focal mechanism */
   /* Raleigh wave measurements ( stalon, stalat, grT, phT, amp ) */
   /* Love wave measurements ( stalon, stalat, grT, phT, amp ) */

#include "EQKSearcher.h"
#include <cstdio>
#include <cstdlib>
#include <iostream>

int main( int argc, char *argv[] ) {
   if( argc != 2 ) {
      std::cerr<<"Usage: "<<argv[0]<<" [parameter file]"<<std::endl;
      exit(-1);
   }

   EQKSearcher eSearcher( argv[1] );

   if( ! eSearcher.LoadData() ) {
      exit(0);
   }

   for(int iter=0; iter<3; iter++) {
//float E;
//EpicInfo eitmp = EpicInfo(245.229, 41.076, -1.8);
//eSearcher.Energy( eitmp, E ); std::cerr<<E<<std::endl;
      /* output 1 */
      // update azimuth & distance based on the current location
      eSearcher.UpdateAziDis();
      // update Focal corrections based on the current finfo
      if( ! eSearcher.UpdateFocalCorr() ) {
	 std::cerr<<"Error(main): correct focal failed!"<<std::endl;
	 exit(0);
      }
      eSearcher.OutputFocal();

      /* search for a better location
       * This is a linear problem. At alpha=0.98, the temperature decays down to 0 
       * in the first 200 steps allowing fast convergence to the optimal location */
      if( ! eSearcher.SearchLocation(2000, 0.98, 0.3) ) {
	 std::cerr<<"Error(main): search location failed!"<<std::endl;
	 exit(0);
      }
      if( ! eSearcher.PrepareFocalData() ) {
	 std::cerr<<"Error(main): Data preparation fo focal search failed!"<<std::endl;
	 exit(0);
      }

      /* output 2 */
      //eSearcher.UpdateAziDis();
      //eSearcher.OutputFocal();

      /* search for better focal info
       * the focal mechanism is rather unstable. A smaller alpha and larger t0 is
       * set so that the search result is likely to converge to the global minimum */
      if( ! eSearcher.SearchFocal( 5000, 0.9985, 10. ) ) {
	 std::cerr<<"Error(main): search focal failed!"<<std::endl;
	 exit(0);
      }
   }
   eSearcher.UpdateAziDis();
   if( ! eSearcher.UpdateFocalCorr() ) {
      std::cerr<<"Error(main): correct focal failed!"<<std::endl;
      exit(0);
   }
   eSearcher.OutputFocal();

   std::cout<<eSearcher.FInfo()<<std::endl;

   return 0;
}
