#include <iostream>
#include <vector>
#include <random>
#include <algorithm>

class AziData {
public:
	AziData( const float aziin, const float datain )
		: azi(aziin), data(datain)	{}

	friend bool operator<( const AziData& ad1, const AziData& ad2 ) {
		return (ad1.azi < ad2.azi);
	}

	friend std::ostream& operator<<( std::ostream& o, const AziData& ad ) {
		o << ad.azi << " " << ad.data;
		return o;
	}

private:
	float azi, data;
};

class StaData : public AziData {
public:
	StaData( const float aziin, const float datain, const float data2in )
		: AziData(aziin, datain), data2(data2in) {}

private:
	float data2 = -12345.;
};


int main() {
	std::random_device rd;
	std::mt19937 gen( rd() );
	std::uniform_int_distribution<> dis(1,360);
	std::vector<StaData> sdV;
	for(int i=0; i<10; i++) {
		sdV.push_back( StaData( dis(gen), i, -i ) );
	}
	std::sort( sdV.begin(), sdV.end() );

	for( const auto& sd : sdV ) std::cerr<<sd<<std::endl;

	return 0;
}
