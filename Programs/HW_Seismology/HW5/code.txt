

Here is my code for computing the L1 norm result. The least square one is similar except that it does only the 1st iteration.
This code fit for all three of the linear, annual and biannual term when the input dimension is 6. When fitting for only linear or linear plus annual, simply change the dimension input to 2 or 4 respectively.


int L1_fit_l_s1_s2 (double *tim, double *dat, double *weit, int ndat, int dim,
double *a, double *b, double *c1, double *phi1, double *c2, double *phi2,
double *vr, double *rc, double **cov)
{
   int i, j, ii, iter;
   double pi=3.14159265359, sec_y=3600.*24.*365.25;

   if(dim!=2 && dim!=4 && dim!=6) {
      cout<<"dim has to be one of the 3 value: 2 4 or 6!"<<endl;
      exit(0);
   }
//-------------initialize data matrices-----------//
   double A[dim][ndat], AC[dim], coef[dim], **AA, **AAI;
   AA = (double **) malloc ( dim * sizeof(double *) );
   AAI = (double **) malloc ( dim * sizeof(double *) );
   for(i=0;i<dim;i++) AA[i] = (double *) malloc ( dim * sizeof(double) );
   for(i=0;i<dim;i++) AAI[i] = (double *) malloc ( dim * sizeof(double) );
//-------------define G matrix-------------------//
   for(i=0;i<ndat;i++) {
      A[0][i] = weit[i];
      A[1][i] = tim[i]*weit[i];
      if(dim==2) continue;
      A[2][i] = sin(tim[i]*2*pi/sec_y)*weit[i];
      A[3][i] = cos(tim[i]*2*pi/sec_y)*weit[i];
      if(dim==4) continue;
      A[4][i] = sin(tim[i]*4*pi/sec_y)*weit[i];
      A[5][i] = cos(tim[i]*4*pi/sec_y)*weit[i];
   }
//-------------IRLS loop starts------------------//
   double datf[ndat], R[ndat], coef_o[dim], dm2, m2, tolr=1e-26, tolm=1e-26;
   for(i=0;i<ndat;i++) R[i] = 1.;
   for(i=0;i<dim;i++) coef[i] = 0;
   for(iter=0;;iter++) {
      //----------G transpose * R * G--------------//
      for(i=0;i<dim;i++)
         for(j=i;j<dim;j++) {
            AA[i][j] = 0.;
            for(ii=0;ii<ndat;ii++) AA[i][j] += A[i][ii]*R[ii]*A[j][ii];
         }
      for(i=1;i<dim;i++) for(j=0;j<i;j++) AA[i][j] = AA[j][i];
      //----------G'RG inverse-------------------//
      Inverse( AA, dim, cov );
      //----------G transpose * R * d---------------//
      for(i=0;i<dim;i++) {
         AC[i]=0;
         for(ii=0;ii<ndat;ii++) AC[i] += A[i][ii]*R[ii]*dat[ii]*weit[ii];
      }
      //----------(G'RG) inverse * G'Rd-----------//
      for(i=0;i<dim;i++) {
         coef_o[i] = coef[i];
         coef[i] = 0;
         for(j=0;j<dim;j++) {
             coef[i] += cov[i][j]*AC[j];
         }
      }
      dm2=0; m2=0;
      //----------residual vector converge?-------//
      for(i=0;i<dim;i++) {
         dm2 += pow(coef[i]-coef_o[i],2);
         m2 += pow(coef_o[i],2);
      }
      if(dm2/(1.+m2) < tolm) break;
      //----------compute new R------------------//
      for(i=0;i<ndat;i++) {
         datf[i] = 0;
         for(ii=0;ii<dim;ii++) datf[i]+=A[ii][i]*coef[ii];
         datf[i]/=weit[i];
         R[i] = fabs(dat[i] - datf[i]);
         if(R[i]<tolr) R[i]=fabs(1./tolr);
         else R[i] = fabs(1./R[i]);
      }
   }
   cout<<"    "<<iter<<" iterations performed for tolr=1e-25 and
tolm=1e-25"<<endl;

//------------------compute variance reduction and reduced chi-squre
//value--------------------------//
   double dd;
   for(i=0;i<ndat;i++) {
      datf[i] = 0;
      for(ii=0;ii<dim;ii++) datf[i]+=A[ii][i]*coef[ii];
      datf[i]/=weit[i];
   }
   dd=0; *vr=0; *rc=0;
   for(i=0;i<ndat;i++) {
      dd += pow(dat[i],2);
      *vr += pow(dat[i]-datf[i],2);
      *rc += pow((dat[i]-datf[i])*weit[i],2);
   }
   *vr = *vr/dd;

//---------------------------compute fitting
//coefficients---------------------------------//
   *a=coef[0];
   *b=coef[1];
   if(dim>2) {
      *c1=sqrt(coef[2]*coef[2]+coef[3]*coef[3]);
      *phi1=atan2(coef[3],coef[2]);
   }
   if(dim>4) {
      *c2=sqrt(coef[4]*coef[4]+coef[5]*coef[5]);
      *phi2=atan2(coef[5],coef[4]);
   }
   //*std = 0;
   //for(i=0;i<ndat;i++) *std += pow((dat[i] - (*A0 + *A1 *
   //sin(tim[i]*pi/180.+*phi))),2);
   //*std = sqrt(*std/(ndat-1));
   return 1;
}

